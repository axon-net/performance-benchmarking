# deploy to ec2 instances
- hosts: localhost
  vars_files:
    - credentials.yml
    - vars.yml
  tasks:
    - name: Installing boto library
      pip:
         name: boto
         state: present
    - name: Making Security group for multi-node cluster
      amazon.aws.ec2_group:
         name: "{{ secgroup_name }}"
         aws_region: "{{ aws_region }}"
         description: "{{ security_group_description }}"
         vpc_id: "{{ vpc_id }}"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         rules:
            - proto: all
              cidr_ip: "0.0.0.0/0"

    # Broker and Gateway Node Setup
    - name: Launching Submariner Broker Node
      amazon.aws.ec2_instance:
         name: "cluster1-ha1-node"
         aws_region: "{{ aws_region }}"
         key_name: "{{ aws_key_name }}"
         instance_type: "{{ aws_instance_type }}"
         image_id: "{{ aws_image_id }}"
         security_group: "{{ secgroup_name }}"
         network:
           assign_public_ip: true
         subnet_id: "{{ aws_subnet }}"
         tags:
           NodeType: "submariner-broker-gateway-node"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         state: running
         wait: true
      register: brokerIp

    - name: Updating the broker node's public ip in inventory
      lineinfile:
         path: "{{ inventory_location }}"
         regexp: "brokerNode"
         line: "[brokerNode]\n{{ brokerIp['instances'][0]['public_ip_address']}} ansible_user={{ ansible_user }} ansible_connection=ssh k8s_master={{ brokerIp['instances'][0]['private_ip_address']}} hostname=cluster1-ha1-node\n"

    # Experimental Second Gateway Node Setup
    - name: Launching Secondary Submariner Gateway Node
      amazon.aws.ec2_instance:
         name: "cluster1-ha2-node"
         aws_region: "{{ aws_region }}"
         key_name: "{{ aws_key_name }}"
         instance_type: "{{ aws_instance_type }}"
         image_id: "{{ aws_image_id }}"
         security_group: "{{ secgroup_name }}"
         network:
           assign_public_ip: true
         subnet_id: "{{ aws_subnet }}"
         tags:
           NodeType: "submariner-secondary-gateway-node"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         state: running
         wait: true
      register: secondaryGatewayNodeIP

    - name: Updating the secondary gateway node's public ip in inventory
      lineinfile:
         path: "{{ inventory_location }}"
         regexp: "secondaryGatewayNode"
         line: "[secondaryGatewayNode]\n{{ secondaryGatewayNodeIP['instances'][0]['public_ip_address']}} ansible_user={{ ansible_user }} ansible_connection=ssh k8s_master={{ brokerIp['instances'][0]['private_ip_address']}} hostname=cluster1-ha2-node\n"

    # Perf Collector Node Setup
    - name: Launching Performance Collector Node
      amazon.aws.ec2_instance:
         name: "cluster2-perf-target"
         aws_region: "{{ aws_region }}"
         key_name: "{{ aws_key_name }}"
         instance_type: "{{ aws_instance_type }}"
         image_id: "{{ aws_image_id }}"
         security_group: "{{ secgroup_name }}"
         network:
           assign_public_ip: true
         subnet_id: "{{ aws_subnet }}"
         tags:
           NodeType: "submariner-perf-collector-node"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         state: running
         wait: true
      register: perfCollectorIP

    - name: Updating the secondary gateway node's public ip in inventory
      lineinfile:
         path: "{{ inventory_location }}"
         regexp: "perfCollectorNode"
         line: "[perfCollectorNode]\n{{ perfCollectorIP['instances'][0]['public_ip_address']}} ansible_user={{ ansible_user }} ansible_connection=ssh k8s_master={{ brokerIp['instances'][0]['private_ip_address']}} hostname=cluster2-perf-target\n"

    # Worker Node(s) Setup
    - name: Launching Worker Nodes
      amazon.aws.ec2_instance:
         name: "cluster1-worker{{ item+1 }}-node"
         aws_region: "{{ aws_region }}"
         key_name: "{{ aws_key_name }}"
         instance_type: "{{ aws_instance_type }}"
         image_id: "{{ aws_image_id }}"
         security_group: "{{ secgroup_name }}"
         network:
           assign_public_ip: true
         subnet_id: "{{ aws_subnet }}"
         tags:
           NodeType: "submariner-worker-node"
         aws_access_key: "{{ access_key }}"
         aws_secret_key: "{{ secret_key }}"
         state: running
         wait: true
      register: node
      loop: "{{ range(0, node_count | int) }}"

    - name: Updating the worker node's public ip in inventory
      lineinfile:
         path: "{{ inventory_location }}"
         regexp: "workerNode"
         line: "[workerNode]\n{{ node['results'][item]['instances'][0]['public_ip_address']}} ansible_user={{ ansible_user }} ansible_connection=ssh k8s_master={{ brokerIp['instances'][0]['private_ip_address']}} hostname={{ node['results'][item]['instances'][0]['tags'].Name}}"
      loop: "{{ range(0, node_count | int) }}"
